/******************************************************************************
 ** File: Rte_Type.h
 ** Role: Defines the data types neeeded by the application and the RTE.
 ** Generated by Dassault Systèmes Rte Generator
 ** Date: 2023-02-09 08:55:41
 ** Template Version: 0.1
 **
 ** Controller / Compiler / Hardware independent
 **
 ** Copyright 2012 by Dassault Systèmes
 ** All rights exclusively reserved for Dassault Systèmes,
 ** unless expressly agreed to otherwise.
 ** Traceability: [rte sws 1161][rte sws 1160][rte sws 1171][rte sws 2648][rte_sws_1162]
*******************************************************************************/
#ifndef RTE_TYPE_H
#define RTE_TYPE_H

/* Inclusions ================================================================*/
#include "Rte.h"                       /* RTE header file */ /** Traceability: [rte sws 1163]*/

/* ImplementationDataTypes ===================================================*/

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/
typedef uint8 type_kpi_startup_stage;
typedef struct Rte_Struct_kpi_startup_entry kpi_startup_entry;

struct Rte_Struct_kpi_startup_entry {
	uint8 kpi_startup_stage;
	uint32 kpi_startup_time;
};
typedef kpi_startup_entry * dtRef_kpi_startup_entry;
typedef dtRef_kpi_startup_entry * dtRef_dtRef_kpi_startup_entry;

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/
typedef struct Rte_Struct_Dma_Transfer Dma_Transfer;

struct Rte_Struct_Dma_Transfer {
	uint32 srcAddr;
	uint32 destAddr;
	uint32 size;
	uint8 srcBurstLen;
	uint8 dstBurstLen;
	uint8 srcBurstMode;
	uint8 dstBurstMode;
};
typedef struct Rte_Struct_Dma_Config Dma_Config;

struct Rte_Struct_Dma_Config {
	uint8 dummy;
};

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/
typedef uint32 QsfA_Fls_AddressType;
typedef uint32 QsfA_Fls_LengthType;
typedef uint8 QsfA_MemIf_JobResultType;
typedef uint8 QsfA_MemIf_StatusType;
typedef uint8 * p_uint8;
typedef struct Rte_Struct_QsfA_Std_VersionInfoType QsfA_Std_VersionInfoType;

struct Rte_Struct_QsfA_Std_VersionInfoType {
	uint16 VendorID;
	uint16 ModuleID;
	uint8 sw_major_version;
	uint8 sw_minor_version;
	uint8 sw_patch_version;
};
typedef uint8 QsfA_MemIf_ModeType;
typedef struct Rte_Struct_QsfA_Fls_ConfigType QsfA_Fls_ConfigType;

struct Rte_Struct_QsfA_Fls_ConfigType {
	uint32 WriteWindowStart;
	uint32 WriteWindowSize;
	uint32 NvmOffset;
	QsfA_MemIf_ModeType InitMode;
	uint32 ReadAtOnce[2];
	uint32 WriteAtOnce[2];
};

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/



/* ImplementationDataTypes ===================================================*/
typedef const void * dtRef_const_VOID;

/* PerInstanceMemory type definition Traceability: [rte_sws_7133] ============*/


#endif /* ifndef RTE_TYPE_H */

/* End of File Rte_Type.h=====================================================*/
